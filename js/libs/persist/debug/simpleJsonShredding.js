define(["./persistenceUtils","./impl/logger"],(function(e,r){"use strict";return{getShredder:function(n,t,s){return function(i){r.log("Offline Persistence Toolkit simpleJsonShredding: Shredding Response");var o=i.clone(),a=o.headers.get("Etag");return o.text().then((function(i){var o=[],c=[],u="collection";if(i&&i.length>0)try{var d=JSON.parse(i);if(Array.isArray(d))o=d.map((function(e){if(t instanceof Array){var r=[];return t.forEach((function(n){r.push(e[n])})),r}return e[t]})),c=d;else{if(t instanceof Array){var f=[];t.forEach((function(e){f.push(d[e])})),o[0]=f}else o[0]=d[t];c[0]=d,u="single"}}catch(e){r.log("Offline Persistence Toolkit simpleRestJsonShredding: Error during shredding: "+e)}var l=e._mapData(o,c,s);return[{name:n,resourceIdentifier:a,keys:l.keys,data:l.data,resourceType:u}]}))}},getUnshredder:function(n){return function(t,s){return r.log("Offline Persistence Toolkit simpleJsonShredding: Unshredding Response"),Promise.resolve().then((function(){if(!t||1!==t.length)throw new Error({message:"shredded data is not in the correct format."});var r=e._unmapData(t[0].keys,t[0].data,n),i=function(e){var r=e[0].data;if(r&&1===r.length&&"single"===e[0].resourceType)return r[0];return r}([{keys:r.keys,data:r.data,resourceType:t[0].resourceType}]);return e.setResponsePayload(s,i)})).then((function(e){return e.headers.set("x-oracle-jscpt-cache-expiration-date",""),Promise.resolve(e)}))}}}}));